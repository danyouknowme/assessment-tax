// Code generated by MockGen. DO NOT EDIT.
// Source: db/store.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/danyouknowme/assessment-tax/db"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetAllDeductions mocks base method.
func (m *MockStore) GetAllDeductions(ctx context.Context) ([]db.Deduction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeductions", ctx)
	ret0, _ := ret[0].([]db.Deduction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeductions indicates an expected call of GetAllDeductions.
func (mr *MockStoreMockRecorder) GetAllDeductions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeductions", reflect.TypeOf((*MockStore)(nil).GetAllDeductions), ctx)
}

// GetDeductionByType mocks base method.
func (m *MockStore) GetDeductionByType(ctx context.Context, deductionType string) (*db.Deduction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeductionByType", ctx, deductionType)
	ret0, _ := ret[0].(*db.Deduction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeductionByType indicates an expected call of GetDeductionByType.
func (mr *MockStoreMockRecorder) GetDeductionByType(ctx, deductionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeductionByType", reflect.TypeOf((*MockStore)(nil).GetDeductionByType), ctx, deductionType)
}
